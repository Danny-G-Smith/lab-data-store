[color]
  ui = auto

[color "diff"]
  meta = white bold
  frag = cyan bold
  old = red bold
  new = green bold

[core]
  editor = vim
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  ignorecase = false

[alias]
  a = add
  ua = reset HEAD
  b = branch
  c = commit
  co = checkout
  ap = add -p      # Patch mode for specified files
  ca = commit -a   # Add all files and commit
  cm = commit -m   # Commit message
  cam = commit -am # Add all files and commit with message
  s = status -sb   # Short status with current branch
  master = !git checkout master && git pull --prune
  develop = !git checkout develop && git pull --prune

  # When doing "git git log" or some such, do not complain about "git"
  git = !git

  # Commits log with pretty format
  l = log --all --graph --decorate --oneline

  # Fully commits log with statistic
  ll = log --stat --abbrev-commit

  # Ignore files: append file to .ginignore
  ignore = !([ ! -e .gitignore ] && touch .gitignore) | echo `\n$2` >> .gitignore

  # Initialize, add all files and commit
  this = !git init && git add . && git commit -m 'Initial commit'

  # Amend last commit
  amend = commit --amend

  # Ammend last commit with its original message
  redo = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend

  # Reset index changes, but not the working tree
  undo = reset --mixed HEAD^

  # Checkout to HEAD revision
  discard = checkout --

  # List of contributors and how many commits each person has.
  contrib = shortlog -sn

  # See how many lines of code you have written today.
  today = diff --shortstat "@{0 day ago}"

  # How many lines in repo
  stat = !git ls-files | xargs wc -l
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

# Opens the Atom editor.
	atom = ! atom

	# ===================================
	# Viewing history
	# ===================================

	# Shows a graphical log.
	logone = log --oneline --decorate --all --graph

	# Shows the log for the last commit.
	loglast = show --summary

	# Less verbose status.
	st = status --short --branch

	# ===================================
	# Staging
	# ===================================

	stagea = "!f() { \
		clear; \
		git add -A; \
		git st; \
		echo 'Staging all the working changes....'; \
	}; f"

	unstagea = "!f() { \
		clear; \
		git reset HEAD --; \
		git st; \
		echo 'Unstaging all the changes by moving them back to the working directory....'; \
	}; f"

	unstage = "!f() { \
		clear; \
		git reset HEAD ${1-'--'}; \
		git st; \
		echo 'Unstaging change(s) by moving it(them) back into the working directory....'; \
	}; f"

	# ===================================
	# Commits
	# ===================================

	# Commits everything in the working and staging ares.
	# When a commit message is not provided, it pops the editor open.
	commita = "!f() { \
		git add -A; \
		commit_msg=$1; \
		if [[ $commit_msg != '' ]]; \
		then git commit -m \"$commit_msg\"; \
		else git commit; \
		fi; \
		clear; \
		git st; \
		git loglast; \
		echo 'Committed all changes....'; \
	}; f"

	# Uncommits the last commit, throwing away the commit and moving the changes
	# back into the working directory.
	uncommit = "!f() { \
		git reset HEAD^ -q; \
		clear; \
		git st; \
		echo 'Uncommitted the last commit, moving the changes back into your working directory....'; \
	}; f"


	# Pops open your text editor, where you can reword the last commit message.
	# Any WIP changes are stashed and then reapplied after you get done changing the message.
	reword = "!f() { \
		git stash; \
		git commit --amend; \
		git stash pop; \
		clear; \
		git loglast; \
		echo 'Fixed the commit message....'; \
	}; f"

   	# Adds all of the new changes (WIP) in both your working and staging areas to the last commit.
   	# It keeps the commit message.  Therefore, no commit message is needed.
   	addto = "!f() { \
   		git add -A; \
   		git commit --amend --no-edit; \
   		clear; \
   		git loglast; \
   		echo 'Added all working and staged changes (WIP) to the last commit....'; \
   	}; f"

   	# Rolls everything back to the last commit. CAUTION: this command deletes
   	# all of the changes you've made.
   	rollback = "!f() { \
   		git unstage; \
   		git checkout -- .; \
   		git clean -fd; \
   		clear; \
   		git st; \
   		echo 'Rolled back to the last commit....'; \
   	}; f"

   	# ===================================
   	# Branches
   	# ===================================

   	# Creates a new branch and checks it out.
   	newbranch = checkout -b

   	# Deletes both the local and remote branch.
   	deletebranch = "!f() { \
   		name=$1; \
   	  if [[ $name == '' ]]; \
   	  then echo 'Whoops, you forgot to give me the branch name.'; exit -1; \
   	  fi; \
   	  clear; \
   	  git branch -D $name; \
   	  echo \"Deleted the local ${name} branch.\"; \
   	  git branch; \
   		git push origin --delete $name; \
   		echo \"Deleted the remote ${name} branch.\"; \
   	}; f"

   	# Renames the current branch.
   	rename = "!f() { \
   		new_name=$1; \
   	  if [[ $new_name == '' ]]; \
   	  then echo 'Whoops, you forgot to give me the new branch name.'; exit -1; \
   	  fi; \
   	  clear; \
   	  git branch -m $new_name; \
   	  echo \"Renamed the current branch to ${new_name}.\"; \
   	  git branch; \
   	}; f"


[push]
  default = current

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/" # From GIT to SSH
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/" # From GIT to SSH

# Add LFS commands
[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process

# Include local settings from .gitlocal
# Requires Git 1.7.10
# Setup:
#   git config -f ~/.gitlocal user.email "your@email.com"
#   git config -f ~/.gitlocal user.name "Name Lastname"
# Example .gitlocal:
# [user]
#   name = Denys Dovhan
#   email = denysdovhan@gmail.com
[include]
  path = ~/.gitlocal
[user]
	name = Danny G Smith

